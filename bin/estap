#!/usr/bin/escript
%%! -pa ebin
%%----------------------------------------------------------------------------

main([]) -> main(["--help"]);
main(["-h"]) -> main(["--help"]);
main(["--help"]) ->
  io:fwrite("Usage: ~s filename~n", [escript:script_name()]);

main([File]) ->
  {ok, {_Module, Forms}} = estap_file:read_file(File, []),
  {ok, {Plan, Tests}} = estap_file:load_code(Forms),
  TestRunId = case Plan of
    no_plan -> estap_server:no_plan();
    {plan, C} -> estap_server:plan(C)
  end,
  io:fwrite("plan: ~p~ntests: ~p~n", [Plan, Tests]),
  run_tests(Tests, TestRunId).

%%----------------------------------------------------------------------------

run_tests([] = _Tests, TestRunId) ->
  estap_server:done(TestRunId),
  ok;
run_tests([{{Mod, Func}, Description, Status} | Rest] = _Tests, TestRunId) ->
  % TODO: bail out support
  case Status of
    run ->
      {Pid, Ref} = spawn_monitor(
        fun() ->
          estap_server:running(TestRunId, Description),
          try Mod:Func() of
            ok           -> estap_server:test_passed(TestRunId);
            {ok, _Value} -> estap_server:test_passed(TestRunId);
            true         -> estap_server:test_passed(TestRunId);
            error           -> estap_server:test_failed(TestRunId, error);
            {error, Reason} -> estap_server:test_failed(TestRunId, {error, Reason});
            false           -> estap_server:test_failed(TestRunId, false);
            Result          -> estap_server:dubious_result(TestRunId, Result)
          catch
            throw:ok           -> estap_server:test_passed(TestRunId);
            throw:{ok, _Value} -> estap_server:test_passed(TestRunId);
            throw:true         -> estap_server:test_passed(TestRunId);
            throw:error           -> estap_server:test_failed(TestRunId, error);
            throw:{error, Reason} -> estap_server:test_failed(TestRunId, {error, Reason});
            throw:false           -> estap_server:test_failed(TestRunId, false)
          end
        end
      ),
      receive
        {'DOWN', Ref, process, Pid, normal} ->
          estap_server:join_test(Pid);
        {'DOWN', Ref, process, Pid, Reason} ->
          estap_server:test_died(Pid, Reason)
      end,
      run;
    {skip, Why} ->
      estap_server:test_skipped(TestRunId, Description, Why),
      skip;
    {todo, Why} ->
      estap_server:test_todo(TestRunId, Description, Why),
      todo
  end,
  run_tests(Rest, TestRunId).

%%----------------------------------------------------------------------------
%% vim:ft=erlang
